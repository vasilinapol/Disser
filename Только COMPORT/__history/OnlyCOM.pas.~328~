unit OnlyCOM;

interface

uses
  Windows, Messages, SysUtils,Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Buttons, ExtCtrls, Menus,
  SDL_sdlbase, SDL_Colsel, SDL_NumLab, SDL_plot3d, CPort, CPDrv, Data.FMTBcd,
  Data.DB, Data.SqlExpr, Vcl.Grids, sSkinManager, sSkinProvider, Vcl.DBGrids;

const
  mas=5;
  mas2=7;
  mas3=9;
  XRes = 9;
  YRes = 9;
  XYRes =35;

  
type
  TForm1 = class(TForm)
    Button1: TButton;
    CommPortDriver1: TCommPortDriver;
    Memo1: TMemo;
    Button2: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Memo2: TMemo;
    RadioButton1: TRadioButton;
    Edit1: TEdit;
    CheckBox1: TCheckBox;
    com: TPlot3D;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Panel1: TPanel;
    Button3: TButton;
    StringGrid1: TStringGrid;
    sSkinManager1: TsSkinManager;
    //COM-PORT//
procedure Button1Click(Sender: TObject);
procedure CommPortDriver1ReceiveData(Sender: TObject; DataPtr: Pointer; DataSize: Cardinal);
procedure Button2Click(Sender: TObject);
    //COM-PORT//
    //PLOT3D//
procedure comDataRendered(Sender: TObject; canvas: Tcanvas);
procedure DrawGraph();
procedure comBeforeRenderPolygon(Sender: TObject;
  canvas: Tcanvas; var Handled: Boolean; CellX, CellY: Integer;
  quad: TQuad; var color: TColor);
procedure comMouseMoveOverPlot(Sender: TObject;
  OverPlot: Boolean; Shift: TShiftState; MouseCellX, MouseCellY: Integer);
    procedure Button3Click(Sender: TObject);
    
//   procedure Preparedata();
    //PLOT3D//
private
MCellX, MCellY : integer;
    { Private declarations }
public
    { Public declarations }
end;

var
  Form1: TForm1;
  elements: array [0..mas2, 0..mas2]of real;
  elements2: array [0..35]of real;
  implementation

{$R *.dfm}
procedure TForm1.Button1Click(Sender: TObject);
begin
  CommPortDriver1.BaudRateValue:=9600;
  CommPortDriver1.PortName:='\\.\Com3';
  CommPortDriver1.DataBits:=db8BITS;
  CommPortDriver1.Connect;
  if CommPortDriver1.Connect=true then
    begin
    radiobutton1.Checked:=true;
    //Memo1.Lines.Add('Connect com port ok.');
    end

  //Memo1.Lines.Add('Connecting error')  ;
  end;

procedure TForm1.Button2Click(Sender: TObject);
  begin
  CommPortDriver1.Disconnect;
  radiobutton1.Checked:=false;
  //Memo1.Lines.Add('Disconect');
  end;

procedure TForm1.Button3Click(Sender: TObject);
begin
memo1.Clear;
end;

procedure TForm1.CommPortDriver1ReceiveData(Sender: TObject; DataPtr: Pointer; DataSize: Cardinal);
//объ€вление процедуры приема результатов
  var
  i,j,i1,j1,k,p,pos_semicolon,q1,q2: integer;   //объ€вление переменных
  countlines:integer;
  length_datepack:integer;
  s,s2,cutted,cutted2:ansistring;
  datepack,test_str:string;
  a: Integer;
  obmen:real;
  prov_na_null:string;
  temp: real;
  p1,p2,p3:real;
  begin
  s := '';
  s2 := '';
  
  for i := 0 to DataSize-1  do
  //счетчик, позвол€щий беспрерывно считывать результаты, поступающие с датчиков
    begin
    s :=  s+ (PAnsiChar(DataPtr)[i]); //присваивание переменной строкового типа данных, приход€щих с датчиков
    s:=StringReplace(s, '.', ',', [rfReplaceAll, rfIgnoreCase]);
    end;
  label1.Caption:=inttostr(datasize);
  memo1.text:=memo1.Text+s;
  datepack:=memo1.Lines[memo1.Lines.Count-1];
  length_datepack:=length(datepack);
  if (length_datepack>180) and(  datepack<>'') then //проверка строки на полноту
  begin
    for I := 0 to 35 do
    begin
      prov_na_null:=copy(datepack,1,(pos(';',datepack))-1);
      if prov_na_null <> '' then
      begin
      elements2[i]:=strtofloat(prov_na_null);
      if (i=2) or (i=6) or (i=10) or (i=14) or (i=18) or (i=22) or (i=26) or (i=30) or (i=34) then
        begin
        obmen:=elements2[i];
        elements2[i]:=elements2[i-1];
        elements2[i-1]:=obmen;
        end;
      delete(datepack,1,(pos(';',datepack)));
      edit1.Text:=edit1.Text+floattostr(elements2[i])+' ';
      end;
    end;
  //  stringgrid1.Cells[i,1]:=floattostr(elements2[i]);
  memo2.Lines.Add(#13#10);

  for I1 := 2 to mas3-2 do

    for j1 := 2 to mas3-2 do
      begin
      elements[i1,j1]:=elements2[j1-2+(mas+1)*(i1-2)];
      end;



  for I1 := 0 to 1 do
    for j1 := 0 to mas3 do
      elements[i1,j1]:=0;

  for I1 := mas3-1 to mas3 do
    for j1 := 0 to mas3 do
      elements[i1,j1]:=0;

  for I1 := 0 to mas3 do
    for j1 := 0 to 1 do
      elements[i1,j1]:=0;

  for I1 := 0 to mas3 do
    for j1 := mas3-1 to mas3 do
      elements[i1,j1]:=0;


    for I1 := 0 to mas3 do
    begin
    for j1 := 0 to mas3 do
      memo2.lines.Text:=memo2.lines.Text+floattostr(elements[i1,j1])+'|';

    memo2.lines.add(#13#10);
    end;


  end;
  drawgraph();
      for q1 := 2 to mas3-2 do
    for q2 := 2 to mas3-2 do
  stringgrid1.Cells[q1-2,q2-2]:=floattostr(elements[q1,q2]);

  end;

///PLOT3d///

procedure TForm1.comBeforeRenderPolygon(Sender: TObject;
  canvas: Tcanvas; var Handled: Boolean; CellX, CellY: Integer;
  quad: TQuad; var color: TColor);


begin
if CheckBox1.Checked then
  if (CellX = MCellX) or (CellY = MCellY) then
    color := clRed;
end;


procedure TForm1.comDataRendered(Sender: TObject; canvas: Tcanvas);
  begin
  Canvas.Brush.Style := bsClear;
  Canvas.Font.Color := clWhite;
  Canvas.TextOut(50,50,'Mining University System Analysis Department');
  end;

procedure TForm1.comMouseMoveOverPlot(Sender: TObject;
  OverPlot: Boolean; Shift: TShiftState; MouseCellX, MouseCellY: Integer);

begin
MCellX := MouseCellX;
MCellY := MouseCellY;
if OverPlot
  then begin
       Edit4.Text := IntToStr(MouseCellX);
       Edit3.Text := IntToStr(MouseCellY);
       Edit2.Text := FloatToStr(elements[MouseCellX, MouseCellY]);

       end
  else begin
       Edit2.Clear;
       Edit3.Clear;
       edit4.Clear;
       end;
com.Repaint;
end;
  
procedure TForm1.DrawGraph();
  var
  i,j : integer;
  min, max :real;
  begin
  com.GridMat.Resize (XRes,YRes);
  for i:=0 to XRes do
    for j:=0 to YRes do
    com.GridMat.Elem[i,j] := elements[i,j]*100;
  min := elements[0,0];
  for i:=0 to XRes do
    for j:=0 to YRes do
    if elements[i,j] < min then min := elements[i,j];
  max := elements[0,0];
  for i:=0 to XRes do
    for j:=0 to YRes do
    if elements[i,j] > max then max := elements[i,j];
  com.RangeZLow := int(min) - 100;
  com.ColorScaleLow := int(min);
  com.RangeZHigh := int(max) + 100;
  com.ColorScaleHigh := int(max);
  com.Repaint;
  end;

  



end.




